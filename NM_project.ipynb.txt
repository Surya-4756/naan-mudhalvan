{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.layers import Input, Dense\n",
        "from tensorflow.keras.models import Model\n",
        "\n",
        "# Generate some dummy text data\n",
        "texts = [\"hello\", \"world\", \"good\", \"morning\"]\n",
        "vocab = sorted(set(''.join(texts)))\n",
        "char_to_index = {char: index for index, char in enumerate(vocab)}\n",
        "index_to_char = {index: char for index, char in enumerate(vocab)}\n",
        "\n",
        "# Encode texts as one-hot vectors\n",
        "max_len = max(len(text) for text in texts)\n",
        "encoded_texts = np.zeros((len(texts), max_len, len(vocab)), dtype=np.float32)\n",
        "for i, text in enumerate(texts):\n",
        "    for t, char in enumerate(text):\n",
        "        encoded_texts[i, t, char_to_index[char]] = 1\n",
        "\n",
        "# Define the autoencoder architecture\n",
        "input_layer = Input(shape=(max_len, len(vocab)))\n",
        "encoded = Dense(2, activation='relu')(input_layer) # Encoding layer\n",
        "decoded = Dense(len(vocab), activation='softmax')(encoded) # Decoding layer\n",
        "\n",
        "autoencoder = Model(input_layer, decoded)\n",
        "autoencoder.compile(optimizer='adam', loss='categorical_crossentropy')\n",
        "\n",
        "# Train the autoencoder\n",
        "autoencoder.fit(encoded_texts, encoded_texts, epochs=100, batch_size=1)\n",
        "\n",
        "# Generate text using the autoencoder\n",
        "def generate_text(model, start_text, length=10):\n",
        "    generated_text = start_text\n",
        "    for _ in range(length):\n",
        "        encoded_text = np.zeros((1, max_len, len(vocab)), dtype=np.float32)\n",
        "        for t, char in enumerate(start_text):\n",
        "            encoded_text[0, t, char_to_index[char]] = 1\n",
        "        prediction = model.predict(encoded_text)\n",
        "        predicted_char_index = np.argmax(prediction[0, -1, :])\n",
        "        predicted_char = index_to_char[predicted_char_index]\n",
        "        generated_text += predicted_char\n",
        "        start_text += predicted_char\n",
        "    return generated_text\n",
        "\n",
        "# Example usage\n",
        "generated_text = generate_text(autoencoder, start_text=\"he\", length=5)\n",
        "print(\"Generated Text:\", generated_text)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DD_6xrhUWBBB",
        "outputId": "f01ef983-c3c3-4877-a4f1-dcc55b5904fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "4/4 [==============================] - 1s 6ms/step - loss: 1.7860\n",
            "Epoch 2/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7836\n",
            "Epoch 3/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.7814\n",
            "Epoch 4/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.7791\n",
            "Epoch 5/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7771\n",
            "Epoch 6/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.7750\n",
            "Epoch 7/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7729\n",
            "Epoch 8/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.7708\n",
            "Epoch 9/100\n",
            "4/4 [==============================] - 0s 6ms/step - loss: 1.7686\n",
            "Epoch 10/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7666\n",
            "Epoch 11/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7645\n",
            "Epoch 12/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7623\n",
            "Epoch 13/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.7602\n",
            "Epoch 14/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7581\n",
            "Epoch 15/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7559\n",
            "Epoch 16/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7537\n",
            "Epoch 17/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7515\n",
            "Epoch 18/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7492\n",
            "Epoch 19/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7471\n",
            "Epoch 20/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7448\n",
            "Epoch 21/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7427\n",
            "Epoch 22/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7403\n",
            "Epoch 23/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.7380\n",
            "Epoch 24/100\n",
            "4/4 [==============================] - 0s 6ms/step - loss: 1.7357\n",
            "Epoch 25/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7334\n",
            "Epoch 26/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.7310\n",
            "Epoch 27/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7288\n",
            "Epoch 28/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7264\n",
            "Epoch 29/100\n",
            "4/4 [==============================] - 0s 6ms/step - loss: 1.7238\n",
            "Epoch 30/100\n",
            "4/4 [==============================] - 0s 7ms/step - loss: 1.7215\n",
            "Epoch 31/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7190\n",
            "Epoch 32/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7164\n",
            "Epoch 33/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7139\n",
            "Epoch 34/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.7115\n",
            "Epoch 35/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7088\n",
            "Epoch 36/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.7062\n",
            "Epoch 37/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.7035\n",
            "Epoch 38/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.7010\n",
            "Epoch 39/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.6981\n",
            "Epoch 40/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6955\n",
            "Epoch 41/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.6926\n",
            "Epoch 42/100\n",
            "4/4 [==============================] - 0s 6ms/step - loss: 1.6900\n",
            "Epoch 43/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6871\n",
            "Epoch 44/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6842\n",
            "Epoch 45/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6812\n",
            "Epoch 46/100\n",
            "4/4 [==============================] - 0s 3ms/step - loss: 1.6784\n",
            "Epoch 47/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6755\n",
            "Epoch 48/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6723\n",
            "Epoch 49/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6693\n",
            "Epoch 50/100\n",
            "4/4 [==============================] - 0s 6ms/step - loss: 1.6662\n",
            "Epoch 51/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6632\n",
            "Epoch 52/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.6601\n",
            "Epoch 53/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6569\n",
            "Epoch 54/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6537\n",
            "Epoch 55/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6505\n",
            "Epoch 56/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6473\n",
            "Epoch 57/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6440\n",
            "Epoch 58/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.6405\n",
            "Epoch 59/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.6372\n",
            "Epoch 60/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6339\n",
            "Epoch 61/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6307\n",
            "Epoch 62/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6271\n",
            "Epoch 63/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.6238\n",
            "Epoch 64/100\n",
            "4/4 [==============================] - 0s 3ms/step - loss: 1.6203\n",
            "Epoch 65/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6168\n",
            "Epoch 66/100\n",
            "4/4 [==============================] - 0s 3ms/step - loss: 1.6132\n",
            "Epoch 67/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6099\n",
            "Epoch 68/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6059\n",
            "Epoch 69/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.6023\n",
            "Epoch 70/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5983\n",
            "Epoch 71/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5946\n",
            "Epoch 72/100\n",
            "4/4 [==============================] - 0s 3ms/step - loss: 1.5907\n",
            "Epoch 73/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5867\n",
            "Epoch 74/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5828\n",
            "Epoch 75/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5788\n",
            "Epoch 76/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5752\n",
            "Epoch 77/100\n",
            "4/4 [==============================] - 0s 3ms/step - loss: 1.5712\n",
            "Epoch 78/100\n",
            "4/4 [==============================] - 0s 6ms/step - loss: 1.5674\n",
            "Epoch 79/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5634\n",
            "Epoch 80/100\n",
            "4/4 [==============================] - 0s 5ms/step - loss: 1.5596\n",
            "Epoch 81/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5558\n",
            "Epoch 82/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5519\n",
            "Epoch 83/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5480\n",
            "Epoch 84/100\n",
            "4/4 [==============================] - 0s 3ms/step - loss: 1.5440\n",
            "Epoch 85/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5402\n",
            "Epoch 86/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5364\n",
            "Epoch 87/100\n",
            "4/4 [==============================] - 0s 3ms/step - loss: 1.5325\n",
            "Epoch 88/100\n",
            "4/4 [==============================] - 0s 3ms/step - loss: 1.5286\n",
            "Epoch 89/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5247\n",
            "Epoch 90/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5207\n",
            "Epoch 91/100\n",
            "4/4 [==============================] - 0s 3ms/step - loss: 1.5169\n",
            "Epoch 92/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5129\n",
            "Epoch 93/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5092\n",
            "Epoch 94/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5053\n",
            "Epoch 95/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.5014\n",
            "Epoch 96/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.4975\n",
            "Epoch 97/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.4935\n",
            "Epoch 98/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.4897\n",
            "Epoch 99/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.4858\n",
            "Epoch 100/100\n",
            "4/4 [==============================] - 0s 4ms/step - loss: 1.4822\n",
            "1/1 [==============================] - 0s 124ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "1/1 [==============================] - 0s 23ms/step\n",
            "1/1 [==============================] - 0s 21ms/step\n",
            "1/1 [==============================] - 0s 22ms/step\n",
            "Generated Text: heooooo\n"
          ]
        }
      ]
    }
  ]
}